plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.15'
    id 'io.spring.dependency-management' version "1.1.0"
    id 'jacoco'
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
	implementation 'javax.persistence:javax.persistence-api:2.2'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.itextpdf:itextpdf:5.5.13.2'
	
	runtimeOnly 'org.postgresql:postgresql'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport:5.8.0'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/*Teste*.*', '**/entity/**', '**/enums/**', '**/util/**', '**/*ProjetoIntegradoApplication.*'])
        }))
    }
}

test {
	useJUnitPlatform()
	jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}